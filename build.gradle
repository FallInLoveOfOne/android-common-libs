apply plugin: 'com.android.library'
apply from: '../ThirdLibraryConfig.gradle'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile("com.android.support.test.espresso:espresso-core:${ESPRESSO_CORE_VERSION}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:${JUNIT_VERSION}"
    compile "com.google.code.gson:gson:${GSON_VERSION}"
    compile "org.greenrobot:eventbus:${EVENT_BUS_VERSION}"
    compile "com.nostra13.universalimageloader:universal-image-loader:${IMAGE_LOADER_VERSION}"
    compile "com.android.support:appcompat-v7:${APPCOMPAT_VERSION}"
    compile "com.squareup.okhttp3:okhttp:${OK_HTTP3_VERSION}"
    compile files('libs/org.apache.http.legacy.jar')
    compile "com.githang:status-bar-compat:${STATUS_BAR_COMPAT}"
}

def sdkAarName = 'commonLibs_1.0'
def sourceAar = 'commonLibs-release'

// 生成aar
task makeAar(type: Copy, dependsOn: build) {
    from(project.buildDir.toString() + '/outputs/aar', project.buildDir.toString() + '/outputs/mapping/release')
    into(rootProject.rootDir.toString() + '/releaseaar')
    include(sourceAar + '.aar', 'mapping.txt')
    rename(sourceAar, sdkAarName)
    rename('mapping', sdkAarName + "-mapping")
}

// FindBugs 是一个静态分析工具，它检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题
apply plugin: 'findbugs'
task customFindbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    classes = files("$project.buildDir/intermediates/classes")
    source = fileTree('src/main/java/waterhole/commonlibs/')
    classpath = files()
    reports {
        xml.enabled = true
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.rootDir.absolutePath/reports/findbugs_commonLibs.xml"
        html.destination "$project.rootDir.absolutePath/reports/findbugs_commonLibs.html"
    }
}

configurations {
    jaxDoclet
}

task makeJavaDoc(type: Javadoc) {
    title = "CommonLib API"
    source = fileTree('src/main/java/waterhole/commonlibs/')
    destinationDir = file("$project.rootDir.absolutePath/JavaDoc/")
    options.docletpath = configurations.jaxDoclet.files.asType(List)
    options.encoding = "UTF-8"
    options.charSet = 'UTF-8'
    options.links("http://docs.oracle.com/javase/7/docs/api/")
}

artifacts {
    archives file: file("${projectDir}/build/outputs/mapping/release/mapping.txt"), classifier: 'mapping', type: 'txt'
}
